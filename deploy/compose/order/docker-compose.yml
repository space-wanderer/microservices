services: # Раздел, описывающий контейнеры, которые требуются для работы Order-сервиса

  postgres-order: # Контейнер с PostgreSQL, используемый для хранения данных заказов
    image: postgres:17.0-alpine3.20
    # Используем официальный образ PostgreSQL версии 17 на базе Alpine Linux
    # Это лёгкая и быстрая сборка, которая экономит ресурсы

    container_name: postgres-order
    # Устанавливаем уникальное имя контейнера, чтобы было удобно обращаться к нему в CLI и при отладке

    environment: # Переменные окружения, используемые при запуске контейнера
      POSTGRES_DB: order-service # Имя базы данных, которая будет создана при запуске
      POSTGRES_USER: order-service-user # Имя пользователя, создаваемого в базе
      POSTGRES_PASSWORD: order-service-password # Пароль для указанного пользователя

    volumes:
      - postgres_order_data:/var/lib/postgresql/data
      # Определяем том, который будет использоваться для хранения данных PostgreSQL
      # Он сохраняет данные между перезапусками контейнера

    ports:
      - "5432:5432"
      # Пробрасываем внутренний порт PostgreSQL (5432) на порт хоста
      # Это нужно, чтобы другие сервисы или инструменты могли подключиться к базе

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U order-service-user -d order-service" ]
      # Настраиваем проверку готовности контейнера — pg_isready проверяет, принимает ли база подключения
      interval: 10s  # Интервал между проверками — каждые 10 секунд
      timeout: 5s    # Время ожидания ответа от проверки
      retries: 5     # После 5 неудачных попыток подряд контейнер считается "unhealthy"

    restart: unless-stopped
    # Автоматически перезапускаем контейнер, если он аварийно завершился
    # Если контейнер был остановлен вручную — не перезапускаем

    networks:
      - microservices-net
      # Подключаемся к общей сети, чтобы другие микросервисы (например, Order-сервис) могли найти этот контейнер по имени "postgres-order"

volumes: # Раздел с томами — определяем, какие дисковые ресурсы создаёт и использует Docker
  postgres_order_data:
  # Именованный том для хранения данных Order-сервиса в PostgreSQL
  # Позволяет сохранять состояние базы даже после перезапуска контейнера

networks: # Сетевые настройки
  microservices-net:
    external: true
    # Мы не создаём новую сеть, а подключаемся к уже существующей общей сети "microservices-net"
    # Эта сеть создаётся один раз в docker-compose.yml или вручную через docker network create