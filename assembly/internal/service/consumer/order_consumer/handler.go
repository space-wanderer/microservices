package order_consumer

import (
	"context"
	"time"

	"github.com/google/uuid"
	"go.uber.org/zap"

	"github.com/space-wanderer/microservices/assembly/internal/model"
	"github.com/space-wanderer/microservices/platform/pkg/kafka/consumer"
	"github.com/space-wanderer/microservices/platform/pkg/logger"
)

func (s *service) OrderHandler(ctx context.Context, msg consumer.Message) error {
	event := s.assemblyRecodedDecoder.Decode(msg.Value)

	logger.Info(ctx, "Processing message",
		zap.String("topic", msg.Topic),
		zap.Any("partition", msg.Partition),
		zap.Any("offset", msg.Offset),
		zap.String("event_uuid", event.EventUUID),
		zap.String("order_uuid", event.OrderUUID),
		zap.String("user_uuid", event.UserUUID),
		zap.String("payment_method", event.PaymentMethod),
		zap.String("transaction_uuid", event.TransactionUUID),
	)

	// –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–±–æ—Ä–∫—É –∫–æ—Ä–∞–±–ª—è
	logger.Info(ctx, "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –∫–æ—Ä–∞–±–ª—è", zap.String("order_uuid", event.OrderUUID))

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–±–æ—Ä–∫–∏ –∫–æ—Ä–∞–±–ª—è
	timer := time.NewTimer(10 * time.Second)
	select {
	case <-timer.C:
		logger.Info(ctx, "‚úÖ –ö–æ—Ä–∞–±–ª—å —Å–æ–±—Ä–∞–Ω", zap.String("order_uuid", event.OrderUUID))
	case <-ctx.Done():
		timer.Stop()
		logger.Error(ctx, "‚ùå –°–±–æ—Ä–∫–∞ –∫–æ—Ä–∞–±–ª—è –ø—Ä–µ—Ä–≤–∞–Ω–∞", zap.String("order_uuid", event.OrderUUID))
		return ctx.Err()
	}

	// –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ ShipAssembledEvent
	shipAssembledEvent := model.ShipAssembledEvent{
		EventUUID:    uuid.New().String(),
		OrderUUID:    event.OrderUUID,
		UserUUID:     event.UserUUID,
		BuildTimeSec: 10,
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ producer
	if err := s.producerService.ProduceShipAssembledEvent(ctx, shipAssembledEvent); err != nil {
		logger.Error(ctx, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è ShipAssembled", zap.Error(err))
		return err
	}

	logger.Info(ctx, "üì§ –°–æ–±—ã—Ç–∏–µ ShipAssembled –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
		zap.String("event_uuid", shipAssembledEvent.EventUUID),
		zap.String("order_uuid", shipAssembledEvent.OrderUUID),
	)

	return nil
}
