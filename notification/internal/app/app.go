package app

import (
	"context"
	"time"

	"go.uber.org/zap"

	"github.com/space-wanderer/microservices/platform/pkg/closer"
	"github.com/space-wanderer/microservices/platform/pkg/logger"
)

type App struct {
	diContainer *diContainer
	closer      *closer.Closer
}

func NewApp() *App {
	return &App{
		diContainer: NewDiContainer(),
		closer:      closer.New(),
	}
}

func (app *App) Run(ctx context.Context) error {
	logger.Info(ctx, "üöÄ –ó–∞–ø—É—Å–∫ Notification Service")

	// –ó–∞–ø—É—Å–∫–∞–µ–º OrderPaid consumer
	orderPaidConsumerService := app.diContainer.OrderPaidConsumerService(ctx)
	go func() {
		if err := orderPaidConsumerService.RunConsumer(ctx); err != nil {
			logger.Error(ctx, "OrderPaid consumer service error", zap.Error(err))
		}
	}()

	// –ó–∞–ø—É—Å–∫–∞–µ–º OrderAssembled consumer
	orderAssembledConsumerService := app.diContainer.OrderAssembledConsumerService(ctx)
	go func() {
		if err := orderAssembledConsumerService.RunConsumer(ctx); err != nil {
			logger.Error(ctx, "OrderAssembled consumer service error", zap.Error(err))
		}
	}()

	<-ctx.Done()

	logger.Info(ctx, "üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown")

	shutdownCtx, cancel := context.WithTimeout(ctx, 30*time.Second)
	defer cancel()

	if err := app.closer.CloseAll(shutdownCtx); err != nil {
		logger.Error(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤", zap.Error(err))
	}

	logger.Info(ctx, "‚úÖ Notification Service –∑–∞–≤–µ—Ä—à–µ–Ω")
	return nil
}
